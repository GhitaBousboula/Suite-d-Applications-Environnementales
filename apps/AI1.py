import streamlit as st
from datetime import datetime
from typing import Dict, List, Tuple, Optional
import re
def run():
    st.title("üõ£Ô∏è Assistant IA - √âvaluation Environnementale Autorouti√®re")

    class ImpactEnvironnemental:
        """Classe repr√©sentant un impact environnemental avec ses mesures d'att√©nuation"""
        
        def __init__(self, nom: str, description: str, nature: str, mesures: List[str], periode: str = ""):
            self.nom = nom
            self.description = description
            self.nature = nature  # Positif, N√©gatif, Risque
            self.mesures = mesures
            self.periode = periode
        
        def to_dict(self) -> Dict:
            return {
                "nom": self.nom,
                "description": self.description,
                "nature": self.nature,
                "mesures": self.mesures,
                "periode": self.periode
            }

    class ComposanteEnvironnementale:
        """Classe repr√©sentant une composante environnementale (Air, Eau, Sol, etc.)"""
        
        def __init__(self, nom: str, milieu: str, impacts: List[ImpactEnvironnemental]):
            self.nom = nom
            self.milieu = milieu  # PHYSIQUE, BIOLOGIQUE, HUMAIN
            self.impacts = impacts
        
        def get_impacts_par_nature(self, nature: str) -> List[ImpactEnvironnemental]:
            """Retourne les impacts d'une nature donn√©e (Positif, N√©gatif, Risque)"""
            return [impact for impact in self.impacts if impact.nature == nature]
        
        def get_impacts_par_periode(self, periode: str) -> List[ImpactEnvironnemental]:
            """Retourne les impacts d'une p√©riode donn√©e (Construction, Exploitation, D√©mant√®lement)"""
            return [impact for impact in self.impacts if periode.lower() in impact.periode.lower()]

    class BaseConnaissancesAutoroutiere:
        """Base de connaissances sp√©cialis√©e pour les projets autoroutiers"""
        
        def __init__(self):
            self.composantes = self._initialiser_base_connaissances()
            self.mots_cles = self._initialiser_mots_cles()
        
        def _initialiser_mots_cles(self) -> Dict[str, List[str]]:
            """Initialise les mots-cl√©s pour la d√©tection des th√©matiques"""
            return {
                "air": ["air", "poussi√®re", "√©mission", "gaz", "co2", "odeur", "volatil", "pollution atmosph√©rique", "particules"],
                "eau": ["eau", "nappe", "oued", "cours d'eau", "ruissellement", "assainissement", "pollution hydrique", "hydrocarbure"],
                "sol": ["sol", "terrain", "topographie", "terrassement", "√©rosion", "contamination", "d√©blai", "remblai"],
                "bruit": ["bruit", "sonore", "vibration", "nuisance", "d√©cibel", "acoustique"],
                "faune_flore": ["faune", "flore", "biodiversit√©", "habitat", "√©cosyst√®me", "esp√®ce", "v√©g√©tation"],
                "paysage": ["paysage", "visuel", "esth√©tique", "int√©gration paysag√®re"],
                "construction": ["construction", "chantier", "travaux", "terrassement", "d√©frichement"],
                "exploitation": ["exploitation", "trafic", "circulation", "maintenance", "entretien"],
                "d√©mant√®lement": ["d√©mant√®lement", "d√©molition", "remise en √©tat"]
            }
        
        def _initialiser_base_connaissances(self) -> Dict[str, ComposanteEnvironnementale]:
            """Initialise la base de connaissances bas√©e sur les bonnes pratiques autorouti√®res"""
            
            # === MILIEU PHYSIQUE ===
            
            # AIR
            air_impacts = [
                ImpactEnvironnemental(
                    "Envols de poussi√®res et √©missions",
                    "Envols de poussi√®res lors des travaux, √©missions de gaz d'√©chappement des engins, √©missions volatiles, risque d'√©manation d'odeurs",
                    "N√©gatif",
                    [
                        "Arrosage des pistes d'acc√®s et zones remani√©es",
                        "Limitation de la vitesse des v√©hicules de chantier",
                        "Protection des zones de stockage contre l'envol des poussi√®res",
                        "Arr√™t des moteurs en stationnement",
                        "Inspection et entretien r√©gulier des v√©hicules et engins",
                        "Utilisation de carburants appropri√©s",
                        "Interdiction de br√ªler des d√©chets sur le chantier",
                        "Stockage appropri√© des produits volatils en contenants ferm√©s",
                        "Bonne gestion des d√©chets avec √©vacuation vers d√©charge contr√¥l√©e"
                    ],
                    "Construction/D√©mant√®lement"
                ),
                ImpactEnvironnemental(
                    "D√©gradation qualit√© air exploitation",
                    "√âmissions de CO2 des v√©hicules, aux p√©ages et aires de service, lors des entretiens, √©manations d'odeurs",
                    "Risque",
                    [
                        "Fluidifier le trafic et r√©duire les dur√©es d'attente aux p√©ages",
                        "R√©duire et planifier les d√©lais d'interventions d'entretien",
                        "Inspections visuelles du r√©seau d'assainissement",
                        "Respect du plan de gestion des d√©chets",
                        "Interdiction de br√ªlage ou d√©p√¥t sauvage aux aires de service",
                        "Promotion des v√©hicules √©lectriques aux aires"
                    ],
                    "Exploitation"
                ),
                ImpactEnvironnemental(
                    "R√©duction √©missions GES",
                    "D√©congestion du r√©seau routier existant et r√©duction des √©missions de GES",
                    "Positif",
                    [
                        "Conception optimis√©e pour fluidifier le trafic",
                        "R√©duction des temps de parcours",
                        "Diminution de la consommation de carburant"
                    ],
                    "Exploitation"
                )
            ]
            
            # EAU
            eau_impacts = [
                ImpactEnvironnemental(
                    "Imperm√©abilisation et contamination",
                    "Risque d'imperm√©abilisation, contamination par ruissellement d'eaux us√©es, rejets accidentels d'hydrocarbures",
                    "Risque",
                    [
                        "Mise en place d'un syst√®me de drainage pour √©viter stagnation",
                        "Installations de chantier √©loign√©es des cours d'eau (>10m)",
                        "Aucun rejet liquide ou solide dans le r√©seau hydrographique",
                        "Eaux us√©es achemin√©es vers latrines vidangeables",
                        "Entretien r√©gulier des v√©hicules et engins",
                        "Op√©rations d'entretien r√©alis√©es hors chantier",
                        "Parc de stationnement sur plateforme √©tanche avec d√©shuileur",
                        "Kit de d√©pollution pour gestion de fuite accidentelle",
                        "Stockage mati√®res dangereuses avec dispositifs de r√©tention",
                        "Interdiction stockage produits dangereux pr√®s des cours d'eau",
                        "Plan de d√©pollution en cas de pollution accidentelle"
                    ],
                    "Construction"
                ),
                ImpactEnvironnemental(
                    "Contamination en exploitation",
                    "Contamination suite √† rupture canalisation, dysfonctionnement assainissement, incidents technologiques",
                    "Risque",
                    [
                        "Entretien des d√©shuileurs au niveau des ouvrages d'art et aires",
                        "Entretien des stations d'√©puration compactes",
                        "Traitement eaux us√©es conforme √† la r√©glementation",
                        "Contr√¥les r√©guliers qualit√© des eaux",
                        "Interdiction rejet dans les cours d'eau",
                        "Kits d'intervention d'urgence aux points critiques",
                        "Bonne gestion des d√©chets"
                    ],
                    "Exploitation"
                ),
                ImpactEnvironnemental(
                    "Am√©lioration gestion eaux pluviales",
                    "Meilleure collecte et traitement des eaux de ruissellement",
                    "Positif",
                    [
                        "Syst√®me d'assainissement int√©gr√©",
                        "Bassins de r√©tention dimensionn√©s",
                        "Dispositifs de traitement avant rejet"
                    ],
                    "Exploitation"
                )
            ]
            
            # SOL
            sol_impacts = [
                ImpactEnvironnemental(
                    "Pollution et instabilit√© des sols",
                    "Pollution chimique accidentelle, accumulation de d√©chets, d√©blaiement de sols contamin√©s, instabilit√© par √©boulement",
                    "Risque",
                    [
                        "Organisation du chantier (entretien engins, gestion mat√©riaux)",
                        "D√©p√¥t des d√©blais en d√©charge contr√¥l√©e",
                        "R√©utilisation des mat√©riaux de d√©blais en remblais",
                        "Zones de stockage d√©di√©es par type de d√©chet",
                        "√âvacuation r√©guli√®re par entreprises autoris√©es",
                        "Proc√©dure d'intervention en cas de pollution historique",
                        "Pr√©cautions contre fuites et d√©versements accidentels"
                    ],
                    "Construction"
                ),
                ImpactEnvironnemental(
                    "Valorisation des mat√©riaux",
                    "R√©utilisation optimale des mat√©riaux excav√©s et r√©duction des apports ext√©rieurs",
                    "Positif",
                    [
                        "√âtude g√©otechnique pr√©alable",
                        "Plan de mouvement des terres optimis√©",
                        "R√©emploi maximum des mat√©riaux sur site"
                    ],
                    "Construction"
                )
            ]
            
            # TOPOGRAPHIE
            topographie_impacts = [
                ImpactEnvironnemental(
                    "Modification topographique",
                    "Modification du terrain par terrassement, accumulation de d√©blais, modification des cours d'eau",
                    "N√©gatif",
                    [
                        "Plan de mouvement des terres (bilan d√©blais/remblais)",
                        "Limiter les zones d'emprunt et de terrassement",
                        "Dispositifs anti-transport de s√©diments vers cours d'eau",
                        "Limitation des zones de travaux au niveau des cours d'eau",
                        "Interdiction stockage mat√©riaux dans le lit des cours d'eau",
                        "Syst√®me de drainage pour bon √©coulement des eaux",
                        "Mod√©lisation des √©coulements hydrauliques"
                    ],
                    "Construction/Exploitation"
                )
            ]
            
            # === MILIEU BIOLOGIQUE ===
            
            faune_flore_impacts = [
                ImpactEnvironnemental(
                    "Perte d'habitat et nuisances faune",
                    "Perte d'habitat lors du d√©capage, nuisances par poussi√®res, bruit et vibrations",
                    "N√©gatif",
                    [
                        "Minimiser le p√©rim√®tre d'intervention et d√©capage",
                        "Stockage et r√©utilisation terre v√©g√©tale pour espaces verts",
                        "Protection des arbres et arbustes existants",
                        "Interdiction pr√©l√®vement flore locale ou chasse faune",
                        "Cordon de s√©curit√© si esp√®ces prot√©g√©es identifi√©es",
                        "Calendrier des travaux adapt√© aux cycles biologiques",
                        "Passages √† faune si n√©cessaire"
                    ],
                    "Construction"
                ),
                ImpactEnvironnemental(
                    "Fragmentation des habitats",
                    "Effet de coupure de l'infrastructure sur les d√©placements de la faune",
                    "N√©gatif",
                    [
                        "Ouvrages de franchissement pour la faune",
                        "Cl√¥tures directionnelles vers les passages",
                        "Maintien de corridors √©cologiques",
                        "V√©g√©talisation des talus avec esp√®ces locales"
                    ],
                    "Exploitation"
                ),
                ImpactEnvironnemental(
                    "Am√©lioration habitats compensatoires",
                    "Cr√©ation de nouveaux habitats et espaces verts",
                    "Positif",
                    [
                        "Plantations d'esp√®ces indig√®nes",
                        "Cr√©ation de zones humides compensatoires",
                        "Gestion √©cologique des d√©pendances vertes"
                    ],
                    "Construction/Exploitation"
                )
            ]
            
            # === MILIEU HUMAIN ===
            
            bruit_impacts = [
                ImpactEnvironnemental(
                    "Nuisances sonores chantier",
                    "Perturbations sonores dues aux travaux et circulation d'engins",
                    "N√©gatif",
                    [
                        "Planning d√©finissant dur√©e des travaux",
                        "Emploi d'engins silencieux",
                        "R√©glage niveau sonore des avertisseurs",
                        "Arr√™t moteurs en stationnement",
                        "Respect horaires de travail (7h-18h en semaine)",
                        "Limitation √† 85 dB(A) pour locaux techniques",
                        "√âcrans acoustiques temporaires si n√©cessaire"
                    ],
                    "Construction/D√©mant√®lement"
                ),
                ImpactEnvironnemental(
                    "Nuisances trafic exploitation",
                    "Nuisances sonores dues au trafic autoroutier pr√®s des habitations",
                    "N√©gatif",
                    [
                        "Barri√®res antibruit aux zones sensibles",
                        "Rev√™tement routier absorbant",
                        "Optimisation du trac√© pour √©loigner des habitations",
                        "Merlons paysagers"
                    ],
                    "Exploitation"
                ),
                ImpactEnvironnemental(
                    "R√©duction nuisances globales",
                    "Diminution du bruit sur le r√©seau existant par report de trafic",
                    "Positif",
                    [
                        "D√©lestage du trafic des voies urbaines",
                        "R√©duction des embouteillages sources de bruit"
                    ],
                    "Exploitation"
                )
            ]
            
            qualite_vie_impacts = [
                ImpactEnvironnemental(
                    "Perturbations temporaires",
                    "Perturbation circulation, augmentation bruit et poussi√®res, perturbation des usages locaux",
                    "N√©gatif",
                    [
                        "Plan de circulation et signalisation",
                        "Arrosage r√©gulier des pistes d'acc√®s",
                        "Programme de communication vers population locale",
                        "Cl√¥ture chantier maintenue en bon √©tat",
                        "Respect obligations de signalisation",
                        "Passerelles pour maintien acc√®s pi√©tonnier",
                        "Balisage et panneaux de signalisation temporaire",
                        "Coordination avec services d'urgence"
                    ],
                    "Construction/D√©mant√®lement"
                ),
                ImpactEnvironnemental(
                    "Am√©lioration cadre de vie",
                    "Am√©lioration de la liaison routi√®re, fluidit√© et s√©curit√© du trafic",
                    "Positif",
                    [
                        "Conception pour s√©curit√© et fluidit√©",
                        "R√©duction des temps de parcours",
                        "Diminution des risques d'accidents",
                        "Int√©gration paysag√®re soign√©e"
                    ],
                    "Exploitation"
                )
            ]
            
            economie_impacts = [
                ImpactEnvironnemental(
                    "Impact √©conomique construction",
                    "Emplois temporaires, retomb√©es √©conomiques locales, nuisances commerciales",
                    "Positif",
                    [
                        "Privil√©gier la main d'≈ìuvre locale",
                        "Sous-traitance avec entreprises r√©gionales",
                        "Maintien acc√®s aux commerces durant travaux",
                        "Communication sur planning des travaux"
                    ],
                    "Construction"
                ),
                ImpactEnvironnemental(
                    "D√©veloppement √©conomique",
                    "Am√©lioration de l'accessibilit√©, d√©veloppement √©conomique r√©gional",
                    "Positif",
                    [
                        "Facilitation des √©changes √©conomiques",
                        "D√©senclavement de certaines zones",
                        "Attraction d'investissements"
                    ],
                    "Exploitation"
                )
            ]
            
            return {
                "air": ComposanteEnvironnementale("Air", "PHYSIQUE", air_impacts),
                "eau": ComposanteEnvironnementale("Eau de surface et souterraine", "PHYSIQUE", eau_impacts),
                "sol": ComposanteEnvironnementale("Sols", "PHYSIQUE", sol_impacts),
                "topographie": ComposanteEnvironnementale("Topographie", "PHYSIQUE", topographie_impacts),
                "faune_flore": ComposanteEnvironnementale("Faune et flore", "BIOLOGIQUE", faune_flore_impacts),
                "bruit": ComposanteEnvironnementale("Environnement sonore et vibrations", "HUMAIN", bruit_impacts),
                "qualite_vie": ComposanteEnvironnementale("Qualit√© de vie et sant√©", "HUMAIN", qualite_vie_impacts),
                "economie": ComposanteEnvironnementale("Aspects socio-√©conomiques", "HUMAIN", economie_impacts)
            }
        
        def detecter_thematiques(self, texte: str) -> List[str]:
            """D√©tecte les th√©matiques environnementales dans le texte"""
            texte_lower = texte.lower()
            thematiques_detectees = []
            
            for thematique, mots_cles in self.mots_cles.items():
                for mot_cle in mots_cles:
                    if mot_cle in texte_lower:
                        if thematique not in thematiques_detectees:
                            thematiques_detectees.append(thematique)
                        break
            
            return thematiques_detectees
        
        def detecter_periode(self, texte: str) -> List[str]:
            """D√©tecte la p√©riode du projet (construction, exploitation, d√©mant√®lement)"""
            texte_lower = texte.lower()
            periodes = []
            
            if any(mot in texte_lower for mot in ["construction", "chantier", "travaux", "terrassement"]):
                periodes.append("Construction")
            if any(mot in texte_lower for mot in ["exploitation", "fonctionnement", "circulation", "trafic"]):
                periodes.append("Exploitation")
            if any(mot in texte_lower for mot in ["d√©mant√®lement", "d√©molition", "remise en √©tat"]):
                periodes.append("D√©mant√®lement")
            
            return periodes if periodes else ["Construction", "Exploitation"]
        
        def get_composante(self, nom: str) -> Optional[ComposanteEnvironnementale]:
            """Retourne une composante par son nom"""
            return self.composantes.get(nom)

    class ConversationManager:
        """Gestionnaire de l'historique des conversations"""
        
        def __init__(self):
            if 'conversation_history' not in st.session_state:
                st.session_state.conversation_history = []
        
        def ajouter_message(self, type_msg: str, contenu: str, timestamp: datetime = None):
            """Ajoute un message √† l'historique"""
            if timestamp is None:
                timestamp = datetime.now()
            
            st.session_state.conversation_history.append({
                'type': type_msg,
                'contenu': contenu,
                'timestamp': timestamp
            })
        
        def get_historique(self) -> List[Dict]:
            """Retourne l'historique des conversations"""
            return st.session_state.conversation_history
        
        def effacer_historique(self):
            """Efface l'historique des conversations"""
            st.session_state.conversation_history = []

    class ChatbotAutoroutier:
        """Chatbot sp√©cialis√© pour l'√©valuation environnementale autorouti√®re"""
        
        def __init__(self):
            self.base_connaissances = BaseConnaissancesAutoroutiere()
            self.conversation_manager = ConversationManager()
        
        def analyser_demande(self, texte_utilisateur: str) -> str:
            """Analyse la demande utilisateur et g√©n√®re une r√©ponse sp√©cialis√©e"""
            thematiques_detectees = self.base_connaissances.detecter_thematiques(texte_utilisateur)
            periodes_detectees = self.base_connaissances.detecter_periode(texte_utilisateur)
            
            if not thematiques_detectees:
                return self._generer_reponse_aide()
            
            return self._generer_analyse_complete(thematiques_detectees, periodes_detectees, texte_utilisateur)
        
        def _generer_reponse_aide(self) -> str:
            """G√©n√®re une r√©ponse d'aide quand aucune th√©matique n'est d√©tect√©e"""
            return """ü§î **Je n'ai pas identifi√© de th√©matiques environnementales sp√©cifiques dans votre message.**

    üìã **Th√©matiques que je peux analyser pour les projets autoroutiers :**
    ‚Ä¢ **Air** : pollution, poussi√®res, √©missions, odeurs
    ‚Ä¢ **Eau** : contamination, ruissellement, assainissement, cours d'eau
    ‚Ä¢ **Sol** : pollution, √©rosion, stabilit√©, terrassement
    ‚Ä¢ **Bruit** : nuisances sonores, vibrations
    ‚Ä¢ **Biodiversit√©** : faune, flore, habitats, √©cosyst√®mes
    ‚Ä¢ **Paysage** : int√©gration visuelle, impact esth√©tique
    ‚Ä¢ **Social** : qualit√© de vie, √©conomie locale

    üèóÔ∏è **Phases de projet autoroutier :**
    ‚Ä¢ **Construction** : chantier, travaux, terrassement
    ‚Ä¢ **Exploitation** : circulation, trafic, maintenance
    ‚Ä¢ **D√©mant√®lement** : d√©molition, remise en √©tat

    üí° **Exemple de question :** *"Quels sont les impacts sur l'air et l'eau pendant la phase de construction de notre projet autoroutier ?"*"""
        
        def _generer_analyse_complete(self, thematiques: List[str], periodes: List[str], texte_original: str) -> str:
            """G√©n√®re une analyse environnementale compl√®te"""
            reponse = f"üéØ **Analyse Environnementale - Projet Autoroutier**\n\n"
            reponse += f"üìä **Synth√®se d√©tect√©e :**\n"
            reponse += f"‚Ä¢ **{len(thematiques)} th√©matique(s) environnementale(s)** identifi√©e(s)\n"
            reponse += f"‚Ä¢ **Phase(s) concern√©e(s) :** {', '.join(periodes)}\n\n"
            
            impacts_totaux = 0
            mesures_totales = 0
            
            for thematique in thematiques:
                composante = self.base_connaissances.get_composante(thematique)
                if not composante:
                    continue
                
                reponse += f"## üåç **{composante.nom.upper()}** *(Milieu {composante.milieu})*\n\n"
                
                impacts_pertinents = []
                for periode in periodes:
                    impacts_periode = composante.get_impacts_par_periode(periode)
                    impacts_pertinents.extend(impacts_periode)
                
                # √âliminer les doublons
                impacts_uniques = []
                noms_impacts = set()
                for impact in impacts_pertinents:
                    if impact.nom not in noms_impacts:
                        impacts_uniques.append(impact)
                        noms_impacts.add(impact.nom)
                
                if not impacts_uniques:
                    impacts_uniques = composante.impacts
                
                for impact in impacts_uniques:
                    impacts_totaux += 1
                    mesures_totales += len(impact.mesures)
                    
                    # Ic√¥ne selon la nature de l'impact
                    icone = "‚ö†Ô∏è" if impact.nature == "Risque" else ("‚ùå" if impact.nature == "N√©gatif" else "‚úÖ")
                    
                    reponse += f"### {icone} **{impact.nom}** *({impact.nature})*\n"
                    reponse += f"üìù *{impact.description}*\n\n"
                    
                    if impact.mesures:
                        reponse += f"**üõ°Ô∏è Mesures d'att√©nuation/compensation ({len(impact.mesures)}) :**\n"
                        for i, mesure in enumerate(impact.mesures, 1):
                            reponse += f"{i}. {mesure}\n"
                        reponse += "\n"
                
                reponse += "‚îÄ" * 60 + "\n\n"
            
            # R√©sum√© final
            reponse += f"üìà **Bilan de l'analyse :**\n"
            reponse += f"‚Ä¢ **{impacts_totaux} impacts** environnementaux identifi√©s\n"
            reponse += f"‚Ä¢ **{mesures_totales} mesures** d'att√©nuation propos√©es\n"
            reponse += f"‚Ä¢ **Priorit√© :** Int√©grer ces mesures d√®s la conception du projet\n\n"
            
            reponse += "üíº **Recommandation :** Ces analyses sont bas√©es sur les meilleures pratiques "
            reponse += "des projets autoroutiers. Adaptez les mesures selon les sp√©cificit√©s de votre site et les r√©glementations locales."
            
            return reponse
        
        def traiter_conversation(self, message_utilisateur: str):
            """Traite un message utilisateur et met √† jour la conversation"""
            self.conversation_manager.ajouter_message("user", message_utilisateur)
            reponse_ia = self.analyser_demande(message_utilisateur)
            self.conversation_manager.ajouter_message("assistant", reponse_ia)

    def main():
        """Fonction principale de l'application Streamlit"""
        
        
        # Initialisation
        if 'chatbot' not in st.session_state:
            st.session_state.chatbot = ChatbotAutoroutier()
        
        chatbot = st.session_state.chatbot
        
        # Interface utilisateur
        st.markdown("*Sp√©cialis√© dans l'analyse des impacts environnementaux des projets autoroutiers*")
        
        # Sidebar with updated guide
        with st.sidebar:
            st.header("üéØ Assistant IA Environnemental")
            
            # Quick stats
            st.info("""
            **üìä Capacit√©s d'analyse :**
            - **8 domaines** environnementaux
            - **3 phases** de projet
            - **20+ impacts** identifiables
            - **100+ mesures** pr√©ventives
            """)
            
            # Interactive examples
            st.subheader("üí° Exemples de questions")
            
            example_questions = [
                "Impact du terrassement sur l'eau et les sols",
                "Nuisances sonores pendant la construction",
                "Mesures pour prot√©ger la biodiversit√©",
                "Pollution de l'air en phase d'exploitation",
                "Aspects √©conomiques et sociaux du projet"
            ]
            
            selected_example = st.selectbox(
                "S√©lectionnez un exemple :",
                ["Choisir un exemple..."] + example_questions
            )
            
            if selected_example != "Choisir un exemple...":
                if st.button("üöÄ Utiliser cet exemple", use_container_width=True):
                    st.session_state.example_input = selected_example
                    st.rerun()
            
            st.markdown("---")
            
            # Quick tips
            st.subheader("üí° Conseils d'utilisation")
            with st.expander("üîç Comment bien formuler votre question"):
                st.markdown("""
                **Pour une analyse optimale :**
                
                ‚úÖ **Pr√©cisez la phase** : construction, exploitation, d√©mant√®lement
                
                ‚úÖ **Mentionnez les domaines** : air, eau, sol, bruit, faune, etc.
                
                ‚úÖ **D√©crivez le contexte** : type de terrain, proximit√© d'habitations, cours d'eau...
                
                **Exemple optimal :**
                *"Notre projet autoroutier traverse une zone foresti√®re avec un cours d'eau. Quels impacts sur la faune et l'eau pendant la construction ?"*
                """)
            
            with st.expander("üìã Domaines d'expertise"):
                st.markdown("""
                **üåç Milieu physique :**
                - Qualit√© de l'air et √©missions
                - Ressources en eau
                - Sols et g√©ologie
                - Topographie et drainage
                
                **üåø Milieu biologique :**
                - Faune et habitats
                - Flore et √©cosyst√®mes
                - Corridors √©cologiques
                
                **üë• Milieu humain :**
                - Environnement sonore
                - Qualit√© de vie
                - D√©veloppement √©conomique
                - Paysage et patrimoine
                """)
            
            st.markdown("---")
            
            # Action buttons
            col1, col2 = st.columns(2)
            with col1:
                if st.button("üóëÔ∏è Nouvelle\nconversation", use_container_width=True):
                    chatbot.conversation_manager.effacer_historique()
                    st.rerun()
            
            with col2:
                if st.button("üìä Statistiques\nde session", use_container_width=True):
                    historique = chatbot.conversation_manager.get_historique()
                    user_messages = [msg for msg in historique if msg['type'] == 'user']
                    st.success(f"**{len(user_messages)}** questions pos√©es")
            
            # Footer info
            st.markdown("---")
            st.caption("ü§ñ Assistant IA sp√©cialis√© en √©valuation environnementale autorouti√®re")
        
        
        # Zone de conversation
        st.markdown("### üí¨ Conversation")
        
        # Container pour l'historique avec hauteur fixe
        chat_container = st.container()
        
        with chat_container:
            historique = chatbot.conversation_manager.get_historique()
            
            if not historique:
                st.info("üëã **Bonjour !** Je suis votre assistant IA sp√©cialis√© en √©valuation environnementale autorouti√®re. D√©crivez-moi votre projet et je vous fournirai une analyse d√©taill√©e des impacts et mesures d'att√©nuation.")
            
            for msg in historique:
                timestamp_str = msg['timestamp'].strftime("%H:%M:%S")
                
                if msg['type'] == 'user':
                    with st.chat_message("user"):
                        st.write(f"**{timestamp_str}** - {msg['contenu']}")
                else:
                    with st.chat_message("assistant"):
                        st.write(f"**{timestamp_str}**")
                        st.markdown(msg['contenu'])
        
        # Zone de saisie
        st.markdown("### ‚úçÔ∏è Votre question")
        
        with st.form(key="message_form", clear_on_submit=True):
            user_input = st.text_area(
                "D√©crivez votre projet autoroutier :",
                height=120,
                placeholder="Exemple : Nous planifions la construction d'une nouvelle section autorouti√®re avec terrassement important, travers√©e de cours d'eau et circulation intense d'engins. Quels sont les principaux impacts sur l'eau et l'air ?",
                key="user_input"
            )
            
            col1, col2, col3 = st.columns([2, 1, 2])
            with col2:
                submitted = st.form_submit_button(
                    "üöÄ Analyser", 
                    use_container_width=True,
                    type="primary"
                )
        
        # Traitement du message
        if submitted and user_input.strip():
            with st.spinner("üîç Analyse environnementale en cours..."):
                chatbot.traiter_conversation(user_input.strip())
            st.rerun()
        elif submitted and not user_input.strip():
            st.warning("‚ö†Ô∏è Veuillez d√©crire votre projet avant de lancer l'analyse.")
        
        # Footer
        st.markdown("---")
        st.markdown(
            "*Assistant IA bas√© sur les meilleures pratiques d'√©valuation environnementale autorouti√®re*",
            help="Cet outil utilise une base de connaissances sp√©cialis√©e pour fournir des analyses personnalis√©es selon votre projet."
        )

    main()
if __name__ == "__main__":
    run()
